name: Build Brave Browser (Self-Hosted Windows)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Component
        - Debug
        - Static

jobs:
  build:
    name: Build Brave Browser for Windows x64
    runs-on: self-hosted
    timeout-minutes: 480 # 8 hours for initial build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: System Information
        run: |
          Write-Host "=== System Information ==="
          systeminfo | findstr /C:"OS Name" /C:"OS Version" /C:"System Type" /C:"Total Physical Memory"
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name="Size(GB)";Expression={[math]::Round($_.Used/1GB + $_.Free/1GB,2)}}, @{Name="Free(GB)";Expression={[math]::Round($_.Free/1GB,2)}}
          Write-Host "=== Environment Variables ==="
          Write-Host "PATH: $env:PATH"
          Write-Host "DEPOT_TOOLS_WIN_TOOLCHAIN: $env:DEPOT_TOOLS_WIN_TOOLCHAIN"

      - name: Check for depot_tools
        run: |
          if (Get-Command "gclient" -ErrorAction SilentlyContinue) {
            Write-Host "✅ depot_tools already available"
            gclient --version
          } else {
            Write-Host "❌ depot_tools not found in PATH"
            Write-Host "Please install depot_tools first (see setup instructions)"
            exit 1
          }

      - name: Check for Visual Studio Build Tools
        run: |
          $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vsWhere) {
            Write-Host "✅ Visual Studio detected:"
            & $vsWhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          } else {
            Write-Host "❌ Visual Studio Build Tools not found"
            Write-Host "Please install Visual Studio 2022 Build Tools with C++ workload"
            exit 1
          }

      - name: Check Node.js and npm
        run: |
          if (Get-Command "node" -ErrorAction SilentlyContinue) {
            Write-Host "✅ Node.js version: $(node --version)"
            Write-Host "✅ npm version: $(npm --version)"
          } else {
            Write-Host "❌ Node.js not found"
            Write-Host "Please install Node.js 18.x or later"
            exit 1
          }

      - name: Set environment variables
        run: |
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "GCLIENT_PY3=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install npm dependencies
        run: |
          Write-Host "Installing npm dependencies..."
          npm install

      - name: Initialize Brave (npm run init)
        run: |
          Write-Host "Starting Brave initialization..."
          Write-Host "This will download Chromium source (~30GB) - may take 30-60 minutes"
          npm run init
        env:
          DEPOT_TOOLS_WIN_TOOLCHAIN: 0
          GCLIENT_PY3: 1

      - name: Build Brave
        run: |
          Write-Host "Building Brave in ${{ github.event.inputs.build_type }} mode..."
          Write-Host "This may take 1-3 hours depending on your hardware"
          npm run build ${{ github.event.inputs.build_type }}
        env:
          DEPOT_TOOLS_WIN_TOOLCHAIN: 0

      - name: Verify build output
        run: |
          $buildType = "${{ github.event.inputs.build_type }}"
          $binaryPath = "src\out\$buildType\brave.exe"
          if (Test-Path $binaryPath) {
            Write-Host "✅ Build successful!"
            Write-Host "Binary location: $binaryPath"
            $fileInfo = Get-Item $binaryPath
            Write-Host "File size: $([math]::Round($fileInfo.Length/1MB, 2)) MB"
            Write-Host "Created: $($fileInfo.CreationTime)"
          } else {
            Write-Host "❌ Build failed - brave.exe not found at $binaryPath"
            Write-Host "Checking output directory contents:"
            if (Test-Path "src\out\$buildType") {
              Get-ChildItem "src\out\$buildType" | Select-Object Name, Length, LastWriteTime
            } else {
              Write-Host "Output directory src\out\$buildType does not exist"
            }
            exit 1
          }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: brave-windows-x64-${{ github.event.inputs.build_type }}-${{ github.run_number }}
          path: |
            src/out/${{ github.event.inputs.build_type }}/brave.exe
            src/out/${{ github.event.inputs.build_type }}/*.dll
            src/out/${{ github.event.inputs.build_type }}/resources/
          retention-days: 30
        if: success()

      - name: Cleanup on failure
        if: failure()
        run: |
          Write-Host "Build failed. Checking disk space and recent logs..."
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{Name="Free(GB)";Expression={[math]::Round($_.Free/1GB,2)}}
          
          # Check if there are any build logs to examine
          if (Test-Path "src\out") {
            Write-Host "Contents of src\out:"
            Get-ChildItem "src\out" -Recurse -Name | Select-Object -First 20
          }
